---
layout: post
title:  "CIT481 Blog 9"
date:   2021-04-30 18:51:41 -0700
categories: jekyll blogs
author: "Behzad"
---


## GitHub Hello World Tutorial

GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. This tutorial teaches you GitHub essentials like repositories, branches, commits, and Pull Requests. You’ll create your own Hello World repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.
This tutorial teaches you GitHub essentials like repositories, branches, commits, and Pull Requests. You’ll create your own Hello World repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.

# Step 1. Create a Repository

A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs.

# To create a new repository
1. In the upper right corner, next to your avatar or identicon, click `+` and then select New repository.
2. Name your repository `hello-world`.
3. Write a short description.
4. Select **Initialize this repository with a README**.
<img src="https://raw.githubusercontent.com/behzad765/cit481/481-pages/assets/images/create_repo.png" alt="Create a New Repository">

Click **Create repository**.

# Step 2. Create a Branch

Branching is the way to work on different versions of a repository at one time.
By default your repository has one branch named `main` which is considered to be the definitive branch. We use branches to experiment and make edits before committing them to `main`.
When you create a branch off the `main` branch, you’re making a copy, or snapshot, of `main` as it was at that point in time. If someone else made changes to the `main` branch while you were working on your branch, you could pull in those updates.

# To create a new branch

1. Go to your new repository `hello-world`.
2. Click the drop down at the top of the file list that says **branch: main**.
3. Type a branch name, `readme-edits`, into the new branch text box.
4. Select the blue **Create branch** box or hit “Enter” on your keyboard.

<img src="https://raw.githubusercontent.com/behzad765/cit481/481-pages/assets/images/readme-edits.gif" alt="Create a new branch">

Now you have two branches, `main` and `readme-edits`. They look exactly the same, but not for long! Next we’ll add our changes to the new branch.

# Step 3. Make and commit changes

On GitHub, saved changes are called *commits*. Each commit has an associated *commit message*, which is a description explaining why a particular change was made. Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.

# Make and commit changes

1. Click the `README.md` file.
2. Click the  **pencil icon** in the upper right corner of the file view to edit.
3. In the editor, write a bit about yourself.
4. Write a commit message that describes your changes.
5. Click **Commit changes** button.

<img src="https://raw.githubusercontent.com/behzad765/cit481/481-pages/assets/images/commit.png" alt="Make and commit changes">

These changes will be made to just the README file on your `readme-edits` branch, so now this branch contains content that’s different from `main`.

# Step 4. Open a Pull Request

Pull Requests are the heart of collaboration on GitHub. When you open a pull request, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.
As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.
You can even open pull requests in your own repository and merge them yourself. It’s a great way to learn the GitHub flow before working on larger projects.

# Open a Pull Request for changes to the README

1. Click the  **Pull Request** tab, then from the Pull Request page, click the green **New pull request** button.
2. In the **Example Comparisons** box, select the branch you made, `readme-edits`, to compare with `main` (the original).
3. Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.
4. When you’re satisfied that these are the changes you want to submit, click the big green **Create Pull Request** button.
5. Give your pull request a title and write a brief description of your changes.

When you’re done with your message, click **Create pull request!**

# Step 5. Merge your Pull Request

In this final step, it’s time to bring your changes together – merging your `readme-edits` branch into the `main` branch.

1. Click the green **Merge pull request** button to merge the changes into `main`.
2. Click **Confirm merge**.
3. Go ahead and delete the branch, since its changes have been incorporated, with the **Delete branch** button in the purple box.

<img src="https://raw.githubusercontent.com/behzad765/cit481/481-pages/assets/images/merge-button.png" alt="Merge your Pull Request">

<img src="https://raw.githubusercontent.com/behzad765/cit481/481-pages/assets/images/delete-button.png" alt="delete Pull Request">

Here’s what you accomplished in this tutorial:
* Created an open source repository
* Started and managed a new branch
* Changed a file and committed those changes to GitHub
* Opened and merged a Pull Request